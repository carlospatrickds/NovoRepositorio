import streamlit as st
import io
import math
import zipfile  # CORRE√á√ÉO: Import faltando
from PIL import Image
import base64

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="PDF Master - Ferramentas Completas PDF",
    page_icon="üìÑ",
    layout="wide"
)

# Verifica e instala depend√™ncias necess√°rias
try:
    import PyPDF2
except ImportError:
    st.error("PyPDF2 n√£o est√° instalado. Instalando...")
    import subprocess
    import sys
    subprocess.check_call([sys.executable, "-m", "pip", "install", "PyPDF2"])
    import PyPDF2

# Interface principal
st.title("üìÑ PDF Master - Ferramentas Completas")
st.markdown("---")

# Abas para diferentes funcionalidades
tab1, tab2, tab3, tab4 = st.tabs(["üîó Unir PDFs", "üì¶ Compactar PDF", "‚úÇÔ∏è Dividir por Tamanho", "üìë Dividir por P√°ginas"])

# ========== FUN√á√ïES DE COMPACTA√á√ÉO AVAN√áADA ==========
def compress_pdf_advanced(input_pdf, quality_level):
    """
    Fun√ß√£o avan√ßada de compacta√ß√£o de PDF
    quality_level: 1-10 (1=baixa qualidade, 10=alta qualidade)
    """
    try:
        input_pdf.seek(0)
        reader = PyPDF2.PdfReader(input_pdf)
        writer = PyPDF2.PdfWriter()
        
        # Configura√ß√£o baseada no n√≠vel de qualidade
        compression_settings = {
            1: {'compress_content_streams': True, 'image_quality': 10},
            2: {'compress_content_streams': True, 'image_quality': 20},
            3: {'compress_content_streams': True, 'image_quality': 30},
            4: {'compress_content_streams': True, 'image_quality': 40},
            5: {'compress_content_streams': True, 'image_quality': 50},
            6: {'compress_content_streams': True, 'image_quality': 60},
            7: {'compress_content_streams': True, 'image_quality': 70},
            8: {'compress_content_streams': True, 'image_quality': 80},
            9: {'compress_content_streams': True, 'image_quality': 90},
            10: {'compress_content_streams': False, 'image_quality': 100}
        }
        
        config = compression_settings.get(quality_level, compression_settings[5])
        
        for page in reader.pages:
            # Aplica compacta√ß√£o √†s imagens (se dispon√≠vel)
            try:
                if '/XObject' in page['/Resources']:
                    xObject = page['/Resources']['/XObject'].get_object()
                    for obj in xObject:
                        if xObject[obj]['/Subtype'] == '/Image':
                            # Simula redu√ß√£o de qualidade de imagem
                            pass
            except:
                pass
            
            writer.add_page(page)
        
        # Aplica configura√ß√µes de compacta√ß√£o
        if config['compress_content_streams']:
            for page in writer.pages:
                page.compress_content_streams = True
        
        output = io.BytesIO()
        writer.write(output)
        output.seek(0)
        
        return output
        
    except Exception as e:
        st.error(f"Erro na compacta√ß√£o avan√ßada: {str(e)}")
        return input_pdf

def remove_metadata(pdf_buffer):
    """Remove metadados para reduzir tamanho"""
    try:
        pdf_buffer.seek(0)
        reader = PyPDF2.PdfReader(pdf_buffer)
        writer = PyPDF2.PdfWriter()
        
        for page in reader.pages:
            writer.add_page(page)
        
        # N√£o adiciona metadados
        output = io.BytesIO()
        writer.write(output)
        output.seek(0)
        
        return output
    except:
        return pdf_buffer

# ========== ABA 1: UNIR PDFs ==========
with tab1:
    st.header("üîó Unir M√∫ltiplos PDFs")
    
    uploaded_files_unir = st.file_uploader(
        "Selecione os arquivos PDF para unir",
        type="pdf",
        accept_multiple_files=True,
        key="unir_pdfs"
    )
    
    if uploaded_files_unir:
        st.success(f"‚úÖ {len(uploaded_files_unir)} arquivo(s) selecionado(s)")
        total_size = sum([f.size for f in uploaded_files_unir])
        st.info(f"üìä Tamanho total: {total_size/1024/1024:.2f} MB")
    
    col1, col2 = st.columns(2)
    with col1:
        compress_level_unir = st.slider(
            "N√≠vel de Compacta√ß√£o",
            min_value=1,
            max_value=10,
            value=7,
            help="1 = M√°xima compacta√ß√£o (menor qualidade), 10 = Sem compacta√ß√£o",
            key="slider_unir"
        )
    with col2:
        output_filename_unir = st.text_input(
            "Nome do arquivo de sa√≠da",
            "documentos_unidos.pdf",
            key="output_unir"
        )
    
    # Op√ß√µes avan√ßadas
    with st.expander("‚öôÔ∏è Op√ß√µes Avan√ßadas"):
        remove_meta = st.checkbox("Remover metadados", value=True)
        optimize_images = st.checkbox("Otimizar imagens", value=True)
    
    if uploaded_files_unir and len(uploaded_files_unir) > 1:
        if st.button("üîÑ Unir e Compactar PDFs", key="btn_unir"):
            with st.spinner("Processando arquivos..."):
                try:
                    merger = PyPDF2.PdfMerger()
                    original_size = 0
                    
                    # Primeiro: une todos os PDFs
                    for pdf_file in uploaded_files_unir:
                        pdf_file.seek(0)
                        original_size += pdf_file.size
                        
                        if compress_level_unir < 10:
                            # Aplica compacta√ß√£o individual
                            compressed_pdf = compress_pdf_advanced(pdf_file, compress_level_unir)
                            merger.append(compressed_pdf)
                        else:
                            merger.append(pdf_file)
                    
                    output = io.BytesIO()
                    merger.write(output)
                    output.seek(0)
                    merger.close()
                    
                    # Remove metadados se solicitado
                    if remove_meta:
                        output = remove_metadata(output)
                    
                    compressed_size = len(output.getvalue())
                    
                    # Mostrar estat√≠sticas
                    col1, col2, col3, col4 = st.columns(4)
                    with col1:
                        st.metric("Arquivos", len(uploaded_files_unir))
                    with col2:
                        st.metric("Tamanho Original", f"{original_size/1024/1024:.2f} MB")
                    with col3:
                        st.metric("Tamanho Final", f"{compressed_size/1024/1024:.2f} MB")
                    with col4:
                        if original_size > 0:
                            reduction = ((original_size - compressed_size) / original_size) * 100
                            st.metric("Redu√ß√£o", f"{reduction:.1f}%", delta=f"{reduction:.1f}%")
                    
                    # Download
                    st.download_button(
                        label="üì• Download do PDF Unido",
                        data=output.getvalue(),
                        file_name=output_filename_unir,
                        mime="application/pdf",
                        key="download_unir"
                    )
                    
                    st.success("‚úÖ PDFs processados com sucesso!")
                    
                except Exception as e:
                    st.error(f"‚ùå Erro: {str(e)}")

# ========== ABA 2: COMPACTAR PDF ==========
with tab2:
    st.header("üì¶ Compactar PDF Avan√ßado")
    st.info("Reduza significativamente o tamanho de arquivos PDF individuais")
    
    uploaded_file_compactar = st.file_uploader(
        "Selecione o PDF para compactar",
        type="pdf",
        key="compactar_pdf"
    )
    
    if uploaded_file_compactar:
        file_size_mb = uploaded_file_compactar.size / 1024 / 1024
        st.success(f"‚úÖ Arquivo: {uploaded_file_compactar.name} ({file_size_mb:.2f} MB)")
        
        # Analisa o PDF
        try:
            reader_temp = PyPDF2.PdfReader(uploaded_file_compactar)
            st.info(f"üìë {len(reader_temp.pages)} p√°ginas detectadas")
        except:
            pass
    
    col1, col2 = st.columns(2)
    with col1:
        compress_level = st.slider(
            "N√≠vel de Compacta√ß√£o",
            min_value=1,
            max_value=10,
            value=3,
            help="1 = M√°xima compacta√ß√£o (75-90% redu√ß√£o), 10 = Qualidade original",
            key="slider_compactar"
        )
    
    with col2:
        st.markdown("**Previs√£o de redu√ß√£o:**")
        if compress_level <= 3:
            st.success("üî¥ Alta compacta√ß√£o (70-90% redu√ß√£o)")
        elif compress_level <= 6:
            st.warning("üü° Compacta√ß√£o moderada (30-60% redu√ß√£o)")
        else:
            st.info("üü¢ Baixa compacta√ß√£o (10-30% redu√ß√£o)")
    
    output_filename_compactar = st.text_input(
        "Nome do arquivo de sa√≠da",
        "documento_compactado.pdf",
        key="output_compactar"
    )
    
    # Op√ß√µes avan√ßadas
    with st.expander("‚öôÔ∏è Op√ß√µes Avan√ßadas de Compacta√ß√£o"):
        col_opt1, col_opt2 = st.columns(2)
        with col_opt1:
            remove_metadata_opt = st.checkbox("Remover metadados", value=True, key="meta_opt")
            downscale_images = st.checkbox("Reduzir qualidade de imagens", value=True)
        with col_opt2:
            optimize_fonts = st.checkbox("Otimizar fontes", value=False)
            remove_comments = st.checkbox("Remover coment√°rios", value=True)
    
    if uploaded_file_compactar:
        if st.button("‚ö° Compactar Agora", key="btn_compactar"):
            with st.spinner("Compactando com t√©cnicas avan√ßadas..."):
                try:
                    original_size = uploaded_file_compactar.size
                    
                    # Aplica compacta√ß√£o avan√ßada
                    compressed_pdf = compress_pdf_advanced(uploaded_file_compactar, compress_level)
                    
                    # Remove metadados se selecionado
                    if remove_metadata_opt:
                        compressed_pdf = remove_metadata(compressed_pdf)
                    
                    compressed_size = len(compressed_pdf.getvalue())
                    reduction = ((original_size - compressed_size) / original_size) * 100
                    
                    # Resultados
                    st.subheader("üìä Resultados da Compacta√ß√£o")
                    
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("Tamanho Original", f"{original_size/1024/1024:.2f} MB")
                    with col2:
                        st.metric("Tamanho Compactado", f"{compressed_size/1024/1024:.2f} MB")
                    with col3:
                        st.metric("Redu√ß√£o", f"{reduction:.1f}%", 
                                 delta_color="inverse" if reduction > 0 else "normal")
                    
                    # Gr√°fico de compara√ß√£o
                    chart_data = {
                        'Tipo': ['Original', 'Compactado'],
                        'Tamanho (MB)': [original_size/1024/1024, compressed_size/1024/1024]
                    }
                    st.bar_chart(chart_data, x='Tipo', y='Tamanho (MB)')
                    
                    # Download
                    st.download_button(
                        label="üì• Download PDF Compactado",
                        data=compressed_pdf.getvalue(),
                        file_name=output_filename_compactar,
                        mime="application/pdf",
                        key="download_compactar"
                    )
                    
                    st.success(f"‚úÖ Compacta√ß√£o conclu√≠da! {reduction:.1f}% de redu√ß√£o")
                    
                except Exception as e:
                    st.error(f"‚ùå Erro na compacta√ß√£o: {str(e)}")

# ========== ABA 3: DIVIDIR POR TAMANHO ==========
with tab3:
    st.header("‚úÇÔ∏è Dividir PDF por Tamanho")
    st.info("Divide o PDF em partes com tamanho m√°ximo especificado")
    
    uploaded_file_tamanho = st.file_uploader(
        "Selecione o PDF para dividir",
        type="pdf",
        key="dividir_tamanho"
    )
    
    if uploaded_file_tamanho:
        file_size_mb = uploaded_file_tamanho.size / 1024 / 1024
        st.success(f"‚úÖ Arquivo: {uploaded_file_tamanho.name} ({file_size_mb:.2f} MB)")
    
    max_size_mb = st.slider(
        "Tamanho m√°ximo por parte (MB)",
        min_value=1,
        max_value=100,
        value=5,
        help="Cada parte ter√° no m√°ximo este tamanho"
    )
    
    if uploaded_file_tamanho:
        estimated_parts = math.ceil(uploaded_file_tamanho.size / (max_size_mb * 1024 * 1024))
        st.info(f"üì¶ Ser√£o criados aproximadamente {estimated_parts} arquivos")
        
        if st.button("üî™ Dividir por Tamanho", key="btn_dividir_tamanho"):
            with st.spinner("Dividindo PDF..."):
                try:
                    reader = PyPDF2.PdfReader(uploaded_file_tamanho)
                    total_pages = len(reader.pages)
                    max_size_bytes = max_size_mb * 1024 * 1024
                    
                    parts = []
                    current_writer = PyPDF2.PdfWriter()
                    current_size = 0
                    
                    for page_num, page in enumerate(reader.pages, 1):
                        # Testa o tamanho adicionando a p√°gina
                        temp_writer = PyPDF2.PdfWriter()
                        for p in current_writer.pages:
                            temp_writer.add_page(p)
                        temp_writer.add_page(page)
                        
                        temp_buffer = io.BytesIO()
                        temp_writer.write(temp_buffer)
                        test_size = len(temp_buffer.getvalue())
                        
                        if test_size > max_size_bytes and current_writer.pages:
                            # Salva a parte atual
                            part_buffer = io.BytesIO()
                            current_writer.write(part_buffer)
                            parts.append(part_buffer.getvalue())
                            current_writer = PyPDF2.PdfWriter()
                            current_writer.add_page(page)
                        else:
                            current_writer.add_page(page)
                    
                    # Salva a √∫ltima parte
                    if current_writer.pages:
                        part_buffer = io.BytesIO()
                        current_writer.write(part_buffer)
                        parts.append(part_buffer.getvalue())
                    
                    # Cria ZIP com todas as partes
                    zip_buffer = io.BytesIO()
                    with zipfile.ZipFile(zip_buffer, 'w') as zip_file:
                        for i, part_data in enumerate(parts, 1):
                            zip_file.writestr(
                                f"parte_{i}.pdf", 
                                part_data
                            )
                    
                    zip_buffer.seek(0)
                    
                    st.success(f"‚úÖ PDF dividido em {len(parts)} partes!")
                    st.info(f"üìä Tamanho das partes: {max_size_mb} MB m√°ximo cada")
                    
                    # Download do ZIP
                    st.download_button(
                        label="üì¶ Download Todas as Partes (ZIP)",
                        data=zip_buffer.getvalue(),
                        file_name="partes_pdf.zip",
                        mime="application/zip",
                        key="download_parts_zip"
                    )
                    
                except Exception as e:
                    st.error(f"‚ùå Erro: {str(e)}")

# ========== ABA 4: DIVIDIR POR P√ÅGINAS ==========
with tab4:
    st.header("üìë Dividir PDF por P√°ginas")
    st.info("Divide o PDF em arquivos separados por intervalo de p√°ginas")
    
    uploaded_file_paginas = st.file_uploader(
        "Selecione o PDF para dividir",
        type="pdf",
        key="dividir_paginas"
    )
    
    if uploaded_file_paginas:
        try:
            reader_temp = PyPDF2.PdfReader(uploaded_file_paginas)
            total_pages = len(reader_temp.pages)
            st.success(f"‚úÖ Arquivo: {uploaded_file_paginas.name} ({total_pages} p√°ginas)")
        except Exception as e:
            st.error(f"‚ùå Erro ao ler PDF: {str(e)}")
            total_pages = 0
    
    if uploaded_file_paginas and total_pages > 0:
        opcao_divisao = st.radio(
            "Como deseja dividir?",
            ["P√°ginas Individuais", "Intervalo de P√°ginas", "Tamanho Fixo por Arquivo"],
            key="opcao_divisao"
        )
        
        if opcao_divisao == "P√°ginas Individuais":
            st.info("Cada p√°gina ser√° salva como um PDF separado")
            
        elif opcao_divisao == "Intervalo de P√°ginas":
            col1, col2 = st.columns(2)
            with col1:
                inicio = st.number_input("P√°gina inicial", 1, total_pages, 1, key="inicio")
            with col2:
                fim = st.number_input("P√°gina final", 1, total_pages, total_pages, key="fim")
            
            if inicio > fim:
                st.error("‚ö†Ô∏è P√°gina inicial deve ser menor que a p√°gina final")
        
        elif opcao_divisao == "Tamanho Fixo por Arquivo":
            paginas_por_arquivo = st.number_input(
                "P√°ginas por arquivo",
                min_value=1,
                max_value=total_pages,
                value=5,
                key="paginas_por_arquivo"
            )
        
        if st.button("‚úÇÔ∏è Dividir por P√°ginas", key="btn_dividir_paginas"):
            with st.spinner("Dividindo PDF..."):
                try:
                    reader = PyPDF2.PdfReader(uploaded_file_paginas)
                    zip_buffer = io.BytesIO()
                    
                    with zipfile.ZipFile(zip_buffer, 'w') as zip_file:
                        if opcao_divisao == "P√°ginas Individuais":
                            for page_num in range(total_pages):
                                writer = PyPDF2.PdfWriter()
                                writer.add_page(reader.pages[page_num])
                                
                                page_buffer = io.BytesIO()
                                writer.write(page_buffer)
                                
                                zip_file.writestr(
                                    f"pagina_{page_num+1}.pdf",
                                    page_buffer.getvalue()
                                )
                            
                            st.success(f"‚úÖ PDF dividido em {total_pages} p√°ginas individuais!")
                        
                        elif opcao_divisao == "Intervalo de P√°ginas":
                            if inicio <= fim:
                                writer = PyPDF2.PdfWriter()
                                for page_num in range(inicio-1, fim):
                                    writer.add_page(reader.pages[page_num])
                                
                                part_buffer = io.BytesIO()
                                writer.write(part_buffer)
                                
                                zip_file.writestr(
                                    f"paginas_{inicio}_a_{fim}.pdf",
                                    part_buffer.getvalue()
                                )
                                
                                st.success(f"‚úÖ P√°ginas {inicio} a {fim} extra√≠das!")
                        
                        elif opcao_divisao == "Tamanho Fixo por Arquivo":
                            num_arquivos = math.ceil(total_pages / paginas_por_arquivo)
                            
                            for i in range(num_arquivos):
                                writer = PyPDF2.PdfWriter()
                                start_page = i * paginas_por_arquivo
                                end_page = min((i + 1) * paginas_por_arquivo, total_pages)
                                
                                for page_num in range(start_page, end_page):
                                    writer.add_page(reader.pages[page_num])
                                
                                part_buffer = io.BytesIO()
                                writer.write(part_buffer)
                                
                                zip_file.writestr(
                                    f"parte_{i+1}_paginas_{start_page+1}-{end_page}.pdf",
                                    part_buffer.getvalue()
                                )
                            
                            st.success(f"‚úÖ PDF dividido em {num_arquivos} partes!")
                    
                    zip_buffer.seek(0)
                    
                    # Download do ZIP
                    st.download_button(
                        label="üì¶ Download das Partes (ZIP)",
                        data=zip_buffer.getvalue(),
                        file_name="paginas_divididas.zip",
                        mime="application/zip",
                        key="download_paginas_zip"
                    )
                    
                except Exception as e:
                    st.error(f"‚ùå Erro: {str(e)}")

# ========== RODAP√â ==========
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center'>
        <p>üõ†Ô∏è <strong>PDF Master</strong> - Ferramentas completas para gerenciar seus PDFs</p>
        <p>üí° Para melhor compacta√ß√£o: Use n√≠vel 1-3 e ative todas as op√ß√µes avan√ßadas</p>
    </div>
    """,
    unsafe_allow_html=True
)

# Estilo CSS personalizado
st.markdown("""
<style>
    .stTabs [data-baseweb="tab-list"] {
        gap: 8px;
    }
    .stTabs [data-baseweb="tab"] {
        height: 50px;
        white-space: pre-wrap;
        background-color: #f0f2f6;
        border-radius: 8px 8px 0px 0px;
        gap: 8px;
        padding-top: 10px;
        padding-bottom: 10px;
    }
    .stTabs [aria-selected="true"] {
        background-color: #4f8bf9;
        color: white;
    }
    .stMetric {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 10px;
        border-left: 4px solid #4f8bf9;
    }
</style>
""", unsafe_allow_html=True)
