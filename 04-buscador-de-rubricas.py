import streamlit as st
import pdfplumber
import re
import pandas as pd

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Buscador de rubricas do HISCRE",
    layout="centered",
    initial_sidebar_state="expanded"

# --- VERIFICA√á√ÉO DE SENHA ---
SENHA_CORRETA = "23"
senha_digitada = st.text_input("Digite a senha para acessar o BUSCADOR:", type="password")

if senha_digitada != SENHA_CORRETA:
    if senha_digitada:  # S√≥ mostra erro se o usu√°rio j√° digitou algo
        st.error("Senha incorreta! Acesso negado.")
    st.stop()  # Para aqui se a senha estiver errada ou vazia

# --- SE CHEGOU AQUI, SENHA EST√Å CORRETA ---
## üîí Aviso de seguran√ßa
st.info("üîí Este sistema **n√£o salva arquivos ou dados na nuvem**. "
        "Todas as informa√ß√µes do HISCRE s√£o processadas apenas localmente, "
        "garantindo confidencialidade e seguran√ßa.")

# ________________________________________________________
    
# Dicion√°rio completo de rubricas (ordenado por c√≥digo)
descricoes_rubricas = {
    "101": "VALOR TOTAL DE MR DO PER√çODO",
    "103": "Abono do Governo Federal",
    "104": "VALOR DO D√âCIMO-TERCEIRO SAL√ÅRIO",
    "105": "SALARIO FAMILIA",
    "106": "Parcela de diferen√ßa de revis√£o da RMI",
    "107": "Complemento positivo",
    "110": "Corre√ß√£o monet√°ria",
    "111": "Parcela de gratifica√ß√£o de ex-combatente",
    "115": "Abono anual de ex-combatente (14¬∫ sal√°rio)",
    "121": "COMPLEMENTO A TITULO DE CPMF",
    "125": "CP ‚Äì Decis√£o judicial",
    "131": "CP - REVISAO BENEFICIO SISTEMA CENTRAL",
    "135": "Gratifica√ß√£o de qualidade e produtividade",
    "137": "ADIANTAMENTO P/ARREDONDAMENTO DO CR√âDITO",
    "145": "Adicional Talidomida",
    "146": "Indeniza√ß√£o por a√ß√£o judicial espec√≠fica",
    "156": "CP ‚Äì Revis√£o de teto",
    "159": "CORRECAO MONETARIA COMPLEMENTAR DE RENDA",
    "201": "IMPOSTO DE RENDA RETIDO NA FONTE",
    "202": "Pens√£o Aliment√≠cia ‚Äì D√©bito",
    "203": "CONSIGNA√á√ÉO",
    "204": "Imposto de Renda no Exterior",
    "205": "Diferen√ßa de Imposto de Renda ‚Äì D√©bito",
    "206": "Desconto do INSS",
    "207": "DESCONTO DE I.R. SOBRE 13¬∫ SAL√ÅRIO",
    "208": "Contribui√ß√£o Previdenci√°ria sobre 13¬∫ Sal√°rio",
    "209": "Diferen√ßa de IR sobre 13¬∫ Sal√°rio ‚Äì D√©bito",
    "210": "Pens√£o Aliment√≠cia sobre 13¬∫ Sal√°rio",
    "211": "Desconto de IR sobre 14¬∫ Sal√°rio",
    "212": "Contribui√ß√£o Previdenci√°ria sobre 14¬∫ Sal√°rio",
    "213": "Pens√£o Aliment√≠cia sobre 14¬∫ Sal√°rio",
    "214": "CONSIGNA√á√ÉO SOBRE 13 SAL.",
    "215": "AJUSTE DO ARREDONDAMENTO DE CR√âDITOS",
    "216": "CONSIGNA√á√ÉO EMPR√âSTIMO BANC√ÅRIO",
    "217": "EMPR√âSTIMO SOBRE A RMC",
    "218": "13. SAL√ÅRIO PAGO COMPET√äNCIAS ANTERIORES",
    "227": "DEVOLUCAO DE CPMF",
    "219-250": "Diversas contribui√ß√µes sindicais e associativas",
    "233": "Desconto para Verifica√ß√£o de Teto",
    "236": "D√©cimo Terceiro Sal√°rio ‚Äì D√©bito",
    "251": "D√©cimo Terceiro Sal√°rio Pago a Maior",
    "252": "Desconto por Acumula√ß√£o de Benef√≠cio J√° Concedido",
    "253": "Desconto por Acumula√ß√£o de Benef√≠cio ‚Äì 13¬∫ Sal√°rio",
    "254": "Consignacao CONTRIBUICAO UNIBAP",
    "268": "CONSIGNACAO - CARTAO",
    "302": "Abatimento IR por Dependente",
    "303": "Abatimento a Benefici√°rio Maior de 65 Anos",
    "304": "Desconto por Dependente sobre 13¬∫ Sal√°rio",
    "305": "Desconto Maior 65 Anos ‚Äì IR 13¬∫ Sal√°rio",
    "308": "Desconto por Dependente sobre 14¬∫ Sal√°rio",
    "309": "Desconto Maior 65 Anos ‚Äì IR 14¬∫ Sal√°rio",
    "310": "Desconto de Consigna√ß√£o no IR",
    "312": "Desconto de Consigna√ß√£o no IR ‚Äì 13¬∫ Sal√°rio",
    "313": "IR N√£o Recolhido por Ordem Judicial",
    "314": "IR N√£o Recolhido por Ordem Judicial ‚Äì 13¬∫ Sal√°rio",
    "320": "IR sobre D√©cimo Terceiro Devolvido",
    "365": "Indeniza√ß√£o Talidomida ‚Äì Lei 12.190/2010",
    "373": "CP ‚Äì Artigo 29 ACP-MP242",
    "375": "CP ‚Äì Indeniza√ß√£o seringueiros",
    "903": "Saldo de Imposto de Renda ‚Äì Positivo",
    "904": "Saldo de Imposto de Renda ‚Äì Negativo",
    "916": "CONSIGNA√á√ÉO IR NA FONTE",
    "917": "Consigna√ß√£o IR no Exterior",
    "920": "Consigna√ß√£o empr√©stimo da CEF"
}

# Inicializar session state
if 'uploaded_file' not in st.session_state:
    st.session_state.uploaded_file = None
if 'dados_extracao' not in st.session_state:
    st.session_state.dados_extracao = None
if 'rubricas_analise' not in st.session_state:
    st.session_state.rubricas_analise = None

# Fun√ß√£o para extrair dados da busca
def extrair_dados_pdf(file, rubricas_filtrar):
    dados = []
    nome = ""
    nbs = set()
    competencia_atual = None
    status_atual = None

    with pdfplumber.open(file) as pdf:
        for num_pagina, pagina in enumerate(pdf.pages, start=1):
            texto = pagina.extract_text()
            if texto:
                linhas = texto.split('\n')
                for linha in linhas:
                    # Capturar Nome
                    nome_match = re.search(r'Nome:\s*([A-Z\s\.\-√á√É√Å√â√ç√ì√ö√Ç√ä√î]+)', linha)
                    if nome_match:
                        nome = nome_match.group(1).strip()

                    # Capturar NB
                    nb_match = re.findall(r'NB:\s*([\d\.\-]+)', linha)
                    if nb_match:
                        nbs.update(nb_match)

                    # Ignorar linhas irrelevantes
                    if (
                        re.search(r'Compet\.\s*Inicial', linha, re.IGNORECASE)
                        or re.search(r'Compet\.\s*Final', linha, re.IGNORECASE)
                        or re.search(r'Nasc', linha, re.IGNORECASE)
                        or re.search(r'Data de Nascimento', linha, re.IGNORECASE)
                        or re.search(r'\d{2}/[A-Za-z]{3}/\d{4}\s+\d{2}:\d{2}:\d{2}', linha)
                    ):
                        continue

                    # Atualizar compet√™ncia
                    comp_match = re.match(r'^(\d{2}/\d{4})', linha.strip())
                    if comp_match and not re.match(r'^\d{3}\s', linha.strip()):
                        competencia_atual = comp_match.group(1)

                    # Status
                    if "Pago" in linha:
                        status_atual = "Pago"
                    elif "N√£o Pago" in linha:
                        status_atual = "N√£o Pago"

                    # Rubrica
                    rubrica_match = re.match(r'^(\d{3})\s+([A-Z\s\.\-√á√É√Å√â√ç√ì√ö√Ç√ä√î\/]+)\s+R\$[\s]*([\d\.,]+)', linha)
                    if rubrica_match:
                        rubrica = rubrica_match.group(1)
                        descricao = rubrica_match.group(2).strip()
                        valor_texto = rubrica_match.group(3).replace('.', '').replace(',', '.')
                        valor_float = float(valor_texto)
                        if not rubricas_filtrar or rubrica in rubricas_filtrar:
                            dados.append({
                                'p.p HISCRE': num_pagina,
                                'Comp.': competencia_atual if competencia_atual else "N√£o encontrada",
                                'Rubrica': rubrica,
                                'Descri√ß√£o': descricao,
                                'Valor (R$)': valor_float,
                                'Status': status_atual if status_atual else "N√£o encontrado"
                            })

    df = pd.DataFrame(dados)
    if not df.empty:
        # Ordenar por compet√™ncia
        df['Ordenar'] = pd.to_datetime(df['Comp.'].str.extract(r'(\d{2})/(\d{4})').apply(
            lambda x: f"{x[1]}-{x[0]}-01", axis=1), errors='coerce')
        df = df.sort_values(by='Ordenar').drop(columns=['Ordenar'])

        # Formatar valor para Real
        df['Valor (R$)'] = df['Valor (R$)'].map(lambda x: f"R$ {x:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))

        df = df.reset_index(drop=True)

    return nome, list(nbs), df

# Fun√ß√£o para extrair todas as rubricas para an√°lise
def extrair_todas_rubricas(file):
    rubricas_encontradas = {}
    
    with pdfplumber.open(file) as pdf:
        for num_pagina, pagina in enumerate(pdf.pages, start=1):
            texto = pagina.extract_text()
            if texto:
                linhas = texto.split('\n')
                for linha in linhas:
                    # Padr√£o para identificar rubricas
                    rubrica_match = re.match(r'^(\d{3})\s+([A-Z\s\.\-√á√É√Å√â√ç√ì√ö√Ç√ä√î\/]+)\s+R\$[\s]*([\d\.,]+)', linha)
                    if rubrica_match:
                        rubrica = rubrica_match.group(1)
                        descricao = rubrica_match.group(2).strip()
                        
                        if rubrica in rubricas_encontradas:
                            rubricas_encontradas[rubrica]["ocorrencias"] += 1
                        else:
                            descricao_ref = descricoes_rubricas.get(rubrica, "N√£o encontrada na refer√™ncia")
                            rubricas_encontradas[rubrica] = {
                                "descricao_doc": descricao,
                                "descricao_ref": descricao_ref,
                                "ocorrencias": 1
                            }
    
    return rubricas_encontradas

# Upload de arquivo na sidebar
with st.sidebar:
    st.header("üìÅ Upload do Documento HISCRE")
    
    # inclu√≠do 25/08/2025
    st.warning("‚ö†Ô∏è Aten√ß√£o: Os arquivos n√£o s√£o salvos na nuvem. "
               "Todo processamento ocorre localmente no seu dispositivo.")

    
    uploaded_file = st.file_uploader("Selecione o arquivo PDF", type="pdf", key="global_uploader")
    
    if uploaded_file is not None:
        st.session_state.uploaded_file = uploaded_file
        st.success("‚úÖ Arquivo carregado com sucesso!")
        
        # Bot√µes de processamento
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üîÑ Processar para An√°lise", use_container_width=True):
                with st.spinner("Processando para an√°lise..."):
                    st.session_state.rubricas_analise = extrair_todas_rubricas(uploaded_file)
                    st.success("Documento processado para an√°lise!")
        
        with col2:
            if st.button("üóëÔ∏è Limpar Arquivo", use_container_width=True):
                st.session_state.uploaded_file = None
                st.session_state.dados_extracao = None
                st.session_state.rubricas_analise = None
                st.rerun()

# CATEGORIAS DE REFER√äNCIA DE RUBRICAS
rubrica_exemplos_mais_comuns = """
**Exemplos de rubrica:**
- **101**: VALOR TOTAL DE MR DO PER√çODO  
- **104**: VALOR DO D√âCIMO-TERCEIRO SAL√ÅRIO
- **105**: SALARIO FAMILIA
- **137**: ADIANTAMENTO P/ARREDONDAMENTO DO CR√âDITO  
- **201**: IMPOSTO DE RENDA RETIDO NA FONTE  
- **203**: CONSIGNA√á√ÉO  
- **207**: DESCONTO DE I.R. SOBRE 13¬∫ SAL√ÅRIO  
- **214**: CONSIGNA√á√ÉO SOBRE 13 SAL.  
- **215**: AJUSTE DO ARREDONDAMENTO DE CR√âDITOS  
- **216**: CONSIGNA√á√ÉO EMPR√âSTIMO BANC√ÅRIO  
- **217**: EMPR√âSTIMO SOBRE A RMC  
- **218**: 13. SAL√ÅRIO PAGO COMPET√äNCIAS ANTERIORES
"""

rubrica_tributacao_ir = """
**Rubricas de Tributa√ß√£o ‚Äì Imposto de Renda**
| C√≥digo | Nomenclatura                           | Descri√ß√£o                                                        |
|--------|----------------------------------------|------------------------------------------------------------------|
| 201    | Imposto de Renda Retido na Fonte       | Valor do IR retido diretamente na fonte sobre rendimentos pagos. |
| 204    | Imposto de Renda no Exterior           | IR incidente sobre rendimentos recebidos fora do Brasil.         |
| 205    | Diferen√ßa de Imposto de Renda ‚Äì D√©bito | Ajuste de d√©bito por diferen√ßa de IR a ser recolhido.            |
| 207    | Desconto de IR sobre 13¬∫ Sal√°rio       | Reten√ß√£o de IR especificamente sobre o valor do 13¬∫ sal√°rio.     |
| 209    | Diferen√ßa de IR sobre 13¬∫ Sal√°rio ‚Äì D√©bito | Corre√ß√£o ou ajuste de d√©bito referente ao IR do 13¬∫ sal√°rio. |
| 211    | Desconto de IR sobre 14¬∫ Sal√°rio       | Reten√ß√£o de IR sobre o valor do 14¬∫ sal√°rio (quando aplic√°vel).  |
"""

rubrica_informativas_ir = """
**Rubricas Informativas ‚Äì Imposto de Renda**
| C√≥digo | Nomenclatura                                | Descri√ß√£o                                                              |
|--------|---------------------------------------------|------------------------------------------------------------------------|
| 302    | Abatimento IR por Dependente                | Redu√ß√£o do IR devido com base no n√∫mero de dependentes.                |
| 303    | Abatimento a Benefici√°rio Maior de 65 Anos  | Isen√ß√£o parcial de IR para benefici√°rios com mais de 65 anos.          |
| 304    | Desconto por Dependente sobre 13¬∫ Sal√°rio   | Redu√ß√£o do IR sobre o 13¬∫ sal√°rio considerando dependentes.            |
| 305    | Desconto Maior 65 Anos ‚Äì IR 13¬∫ Sal√°rio     | Isen√ß√£o parcial de IR sobre o 13¬∫ sal√°rio para maiores de 65 anos.     |
| 308    | Desconto por Dependente sobre 14¬∫ Sal√°rio   | Redu√ß√£o do IR sobre o 14¬∫ sal√°rio considerando dependentes.            |
| 309    | Desconto Maior 65 Anos ‚Äì IR 14¬∫ Sal√°rio     | Isen√ß√£o parcial de IR sobre o 14¬∫ sal√°rio para maiores de 65 anos.     |
| 310    | Desconto de Consigna√ß√£o no IR               | Valores consignados que afetam o c√°lculo do IR.                        |
| 312    | Desconto de Consigna√ß√£o no IR ‚Äì 13¬∫ Sal√°rio | Consigna√ß√µes que impactam o IR sobre o 13¬∫ sal√°rio.                    |
| 313    | IR N√£o Recolhido por Ordem Judicial         | Suspens√£o do recolhimento do IR por decis√£o judicial.                  |
| 314    | IR N√£o Recolhido por Ordem Judicial ‚Äì 13¬∫ Sal√°rio | Suspens√£o do IR sobre o 13¬∫ sal√°rio por decis√£o judicial.        |
| 320    | IR sobre D√©cimo Terceiro Devolvido          | Ajuste do IR referente a valores de 13¬∫ sal√°rio devolvidos.            |
| 903    | Saldo de Imposto de Renda ‚Äì Positivo        | Indica que h√° IR a recolher (saldo devedor).                           |
| 904    | Saldo de Imposto de Renda ‚Äì Negativo        | Indica que houve reten√ß√£o excessiva (saldo credor).                    |
| 916    | Consigna√ß√£o IR na Fonte                     | Valor consignado diretamente na fonte para IR.                         |
| 917    | Consigna√ß√£o IR no Exterior                  | Valor consignado para IR sobre rendimentos recebidos no exterior.      |
"""

rubrica_base_tributacao_ir = """
**Rubricas da Base de Tributa√ß√£o ‚Äì IR**
| C√≥digo | Nomenclatura                                   | Descri√ß√£o                                                               |
|--------|-----------------------------------------------|-------------------------------------------------------------------------|
| 202    | Pens√£o Aliment√≠cia ‚Äì D√©bito                   | Valor pago como pens√£o aliment√≠cia, dedut√≠vel da base de IR.             |
| 203    | Consignacao                                   | Descontos consignados que afetam a base de c√°lculo do IR.                |
| 206    | Desconto do INSS                              | Contribui√ß√µes previdenci√°rias obrigat√≥rias, dedut√≠veis do IR.            |
| 208    | Contribui√ß√£o Previdenci√°ria sobre 13¬∫ Sal√°rio | INSS incidente sobre o 13¬∫ sal√°rio, tamb√©m dedut√≠vel.                    |
| 210    | Pens√£o Aliment√≠cia sobre 13¬∫ Sal√°rio          | Parte do 13¬∫ sal√°rio destinada √† pens√£o, dedut√≠vel.                      |
| 212    | Contribui√ß√£o Previdenci√°ria sobre 14¬∫ Sal√°rio | INSS incidente sobre o 14¬∫ sal√°rio, quando aplic√°vel.                    |
| 213    | Pens√£o Aliment√≠cia sobre 14¬∫ Sal√°rio          | Parte do 14¬∫ sal√°rio destinada √† pens√£o, dedut√≠vel.                      |
| 214    | Consignacao sobre 13¬∫ Sal√°rio                 | Descontos consignados que afetam o 13¬∫ sal√°rio e a base de IR.           |
| 233    | Desconto para Verifica√ß√£o de Teto             | Ajuste para verificar se o valor ultrapassa o teto de contribui√ß√£o.      |
| 236    | D√©cimo Terceiro Sal√°rio ‚Äì D√©bito              | Valor do 13¬∫ sal√°rio que entra como d√©bito na base de c√°lculo.           |
| 251    | D√©cimo Terceiro Sal√°rio Pago a Maior          | Corre√ß√£o por pagamento excedente de 13¬∫ sal√°rio.                         |
| 252    | Desconto por Acumula√ß√£o de Benef√≠cio J√° Concedido | Ajuste por benef√≠cios acumulados que j√° foram considerados.         |
| 253    | Desconto por Acumula√ß√£o de Benef√≠cio ‚Äì 13¬∫ Sal√°rio | Mesma l√≥gica do anterior, mas aplicado ao 13¬∫ sal√°rio.           |
"""

rubrica_pagamentos_regulares = """
üü¢ **Pagamentos Regulares e Complementares**
| C√≥digo | Descri√ß√£o                                            |
|--------|------------------------------------------------------|
| 101    | Valor total de mensalidade reajustada (MR) do per√≠odo|
| 104    | Valor do d√©cimo terceiro sal√°rio                     |
| 105    | Sal√°rio-fam√≠lia                                      |
| 107    | Complemento positivo                                 |
| 110    | Corre√ß√£o monet√°ria                                   |
| 121    | Complemento a t√≠tulo de CPMF                         |
| 159    |CORRECAO MONETARIA COMPLEMENTAR DE RENDA              |  
"""

rubrica_abonos_gratificacoes = """
üü° **Abonos e Gratifica√ß√µes**
| C√≥digo | Descri√ß√£o                                        |
|--------|--------------------------------------------------|
| 103    | Abono do Governo Federal                         |
| 115    | Abono anual de ex-combatente (14¬∫ sal√°rio)       |
| 111    | Parcela de gratifica√ß√£o de ex-combatente         |
| 135    | Gratifica√ß√£o de qualidade e produtividade        |
"""

rubrica_revisoes_judiciais = """
üîµ **Revis√µes e Decis√µes Judiciais**
| C√≥digo | Descri√ß√£o                                        |
|--------|--------------------------------------------------|
| 106    | Parcela de diferen√ßa de revis√£o da RMI           |
| 125    | CP ‚Äì Decis√£o judicial                            |
| 156    | CP ‚Äì Revis√£o de teto                             |
| 373    | CP ‚Äì Artigo 29 ACP-MP242                         |
"""

rubrica_indenizacoes_beneficios = """
üî¥ **Indeniza√ß√µes e Benef√≠cios Especiais**
| C√≥digo | Descri√ß√£o                                        |
|--------|--------------------------------------------------|
| 131    | CP - REVISAO BENEFICIO SISTEMA CENTRAL           |
| 145    | Adicional Talidomida                             |
| 146    | Indeniza√ß√£o por a√ß√£o judicial espec√≠fica         |
| 365    | Indeniza√ß√£o Talidomida ‚Äì Lei 12.190/2010         |
| 375    | CP ‚Äì Indeniza√ß√£o seringueiros                    |
"""

rubrica_consignacoes_descontos = """
üü£ **Consigna√ß√µes e Descontos**
| C√≥digo | Descri√ß√£o                                        |
|--------|--------------------------------------------------|
| 227    | DEVOLUCAO DE CPMF                                |
| 203    | Consignacao                                      |
| 216    | Consignado ‚Äì Empr√©stimo banc√°rio                 |
| 254    | Consignacao CONTRIBUICAO UNIBAP                  |
| 916    | Consignacao IR na fonte                          |
| 920    | Consignacao empr√©stimo da CEF                    |
| 268    | Consignacao - Cartao                             |
"""

rubrica_impostos_contribuicoes = """
‚ö™ **Impostos e Contribui√ß√µes**
| C√≥digo | Descri√ß√£o                                        |
|--------|--------------------------------------------------|
| 201    | IR retido na fonte                               |
| 206    | Desconto do INSS                                 |
| 208    | Contribui√ß√£o previdenci√°ria sobre 13¬∫ sal√°rio    |
| 219-250| Diversas contribui√ß√µes sindicais e associativas  |
"""

# Organizar as rubricas em um dicion√°rio para facilitar o acesso
categorias_rubricas = {
    "Pagamentos Regulares": rubrica_pagamentos_regulares,
    "Abonos e Gratifica√ß√µes": rubrica_abonos_gratificacoes,
    "Revis√µes Judiciais": rubrica_revisoes_judiciais,
    "Indeniza√ß√µes": rubrica_indenizacoes_beneficios,
    "Consigna√ß√µes": rubrica_consignacoes_descontos,
    "Impostos": rubrica_impostos_contribuicoes,
    "Tributa√ß√£o IR": rubrica_tributacao_ir,
    "Informativas IR": rubrica_informativas_ir,
    "Base Tributa√ß√£o": rubrica_base_tributacao_ir,
    "Exemplos": rubrica_exemplos_mais_comuns
}

# NOVA ORDEM DAS ABAS
aba1, aba2, aba3 = st.tabs(["üìã Refer√™ncia de Rubricas", "üìä An√°lise de Rubricas", "üîç Buscador de Rubricas"])

with aba1:
    st.title("üìã Refer√™ncia de Rubricas do HISCRE")
    
    st.markdown("""
    ---
    ### ‚ÑπÔ∏è **Consulta R√°pida:**
    - Use a busca abaixo para encontrar rubricas espec√≠ficas
    - Navegue pelas categorias para explorar todas as rubricas dispon√≠veis
    - Consulte a descri√ß√£o oficial de cada c√≥digo
    ---
    """)
    
    # Adicionar campo de busca
    busca_rubrica = st.text_input("üîç Buscar rubrica por c√≥digo ou descri√ß√£o:", placeholder="Ex: 101 ou mensalidade", key="busca_ref")
    
    # Criar abas para as categorias
    tabs = st.tabs(list(categorias_rubricas.keys()))
    
    for i, (categoria, conteudo) in enumerate(categorias_rubricas.items()):
        with tabs[i]:
            # Se houver uma busca, filtrar o conte√∫do
            if busca_rubrica:
                linhas = conteudo.split('\n')
                linhas_filtradas = [linha for linha in linhas if busca_rubrica.lower() in linha.lower()]
                if linhas_filtradas:
                    st.markdown("\n".join(linhas_filtradas))
                else:
                    st.info(f"Nenhuma rubrica encontrada com '{busca_rubrica}' na categoria {categoria}")
            else:
                st.markdown(conteudo)

with aba2:
    st.title("üìä An√°lise de Rubricas do HISCRE")
    
    st.markdown("""
    ---
    ### ‚ÑπÔ∏è **Como funciona:**
    - Fa√ßa upload do PDF do demonstrativo HISCRE na sidebar
    - Clique em **"Processar para An√°lise"**
    - O sistema identificar√° TODAS as rubricas √∫nicas presentes no documento
    - Para cada rubrica, mostrar√° a descri√ß√£o encontrada e a descri√ß√£o de refer√™ncia
    - Voc√™ poder√° baixar o relat√≥rio completo em CSV
    ---
    """)
    
    if st.session_state.uploaded_file is None:
        st.info("‚ÑπÔ∏è Fa√ßa upload do documento HISCRE na sidebar para come√ßar a an√°lise.")
    elif st.session_state.rubricas_analise is None:
        st.info("‚ÑπÔ∏è Clique em 'Processar para An√°lise' na sidebar para analisar as rubricas.")
    else:
        rubricas = st.session_state.rubricas_analise
        
        st.success(f"‚úÖ Foram encontradas {len(rubricas)} rubricas √∫nicas no documento!")
        
        # Criar DataFrame para exibi√ß√£o
        df_rubricas = pd.DataFrame.from_dict(rubricas, orient='index')
        df_rubricas.index.name = 'Rubrica'
        df_rubricas.reset_index(inplace=True)
        df_rubricas = df_rubricas[['Rubrica', 'descricao_doc', 'descricao_ref', 'ocorrencias']]
        df_rubricas.columns = ['Rubrica', 'Descri√ß√£o no Documento', 'Descri√ß√£o de Refer√™ncia', 'Ocorr√™ncias']
        
        # Ordenar por c√≥digo da rubrica
        df_rubricas['Rubrica'] = df_rubricas['Rubrica'].astype(int)
        df_rubricas = df_rubricas.sort_values('Rubrica')
        df_rubricas['Rubrica'] = df_rubricas['Rubrica'].astype(str)
        
        st.dataframe(df_rubricas, use_container_width=True)
        
        # Estat√≠sticas
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Total de Rubricas √önicas", len(rubricas))
        with col2:
            st.metric("Total de Ocorr√™ncias", df_rubricas['Ocorr√™ncias'].sum())
        with col3:
            rubricas_sem_ref = len(df_rubricas[df_rubricas['Descri√ß√£o de Refer√™ncia'] == "N√£o encontrada na refer√™ncia"])
            st.metric("Rubricas sem Refer√™ncia", rubricas_sem_ref)
        
        # Download do CSV
        csv = df_rubricas.to_csv(index=False, encoding='utf-8-sig')
        st.download_button(
            label="‚¨áÔ∏è Baixar Relat√≥rio de Rubricas",
            data=csv,
            file_name='rubricas_unicas_hiscre.csv',
            mime='text/csv',
            key="download_analise"
        )
        
        # Mostrar rubricas n√£o encontradas na refer√™ncia
        if rubricas_sem_ref > 0:
            st.warning("‚ö†Ô∏è Algumas rubricas n√£o foram encontradas na refer√™ncia:")
            rubricas_nao_encontradas = df_rubricas[df_rubricas['Descri√ß√£o de Refer√™ncia'] == "N√£o encontrada na refer√™ncia"]
            st.dataframe(rubricas_nao_encontradas[['Rubrica', 'Descri√ß√£o no Documento']], use_container_width=True)

with aba3:
    st.title("üîç Buscador de Rubricas no HISCRE")

    st.markdown("""
    ---
    ### ‚ÑπÔ∏è **Como funciona:**
    - Informe at√© 4 rubricas espec√≠ficas para buscar (ou deixe em branco para trazer todas)
    - O sistema identifica o **Nome**, os **NBs**, e traz as rubricas com suas **compet√™ncias, descri√ß√£o, valor, status e p√°gina**
    - Organiza em ordem cronol√≥gica por compet√™ncia
    - Voc√™ pode baixar o resultado em CSV
    ---
    """)

    # Se√ß√£o de entrada de rubricas
    st.subheader("üîé Rubricas para Busca")

    col1, col2 = st.columns(2)
    with col1:
        rubrica1 = st.text_input("Rubrica 1 (ex.: 101)", key="r1")
        if rubrica1.strip() != "":
            descricao = descricoes_rubricas.get(rubrica1.strip())
            if descricao:
                st.caption(f"Descri√ß√£o: {descricao}")
            else:
                st.caption("Rubrica n√£o encontrada.")

        rubrica3 = st.text_input("Rubrica 3", key="r3")
        if rubrica3.strip() != "":
            descricao = descricoes_rubricas.get(rubrica3.strip())
            if descricao:
                st.caption(f"Descri√ß√£o: {descricao}")
            else:
                st.caption("Rubrica n√£o encontrada.")

    with col2:
        rubrica2 = st.text_input("Rubrica 2", key="r2")
        if rubrica2.strip() != "":
            descricao = descricoes_rubricas.get(rubrica2.strip())
            if descricao:
                st.caption(f"Descri√ß√£o: {descricao}")
            else:
                st.caption("Rubrica n√£o encontrada.")

        rubrica4 = st.text_input("Rubrica 4", key="r4")
        if rubrica4.strip() != "":
            descricao = descricoes_rubricas.get(rubrica4.strip())
            if descricao:
                st.caption(f"Descri√ß√£o: {descricao}")
            else:
                st.caption("Rubrica n√£o encontrada.")

    rubricas_busca = [r.strip() for r in [rubrica1, rubrica2, rubrica3, rubrica4] if r.strip() != '']

    # Bot√£o de execu√ß√£o da busca
    executar_busca = st.button("üöÄ Executar Busca", use_container_width=True, key="exec_busca")
    
    if executar_busca:
        if st.session_state.uploaded_file is None:
            st.warning("‚ö†Ô∏è Por favor, fa√ßa upload do PDF primeiro na sidebar.")
        else:
            with st.spinner("‚è≥ Processando busca..."):
                nome, lista_nbs, df = extrair_dados_pdf(st.session_state.uploaded_file, rubricas_busca)
                st.session_state.dados_extracao = {
                    'nome': nome,
                    'lista_nbs': lista_nbs,
                    'df': df,
                    'mostrar_pagos': False
                }
                st.success("Busca conclu√≠da!")
    
    # Exibi√ß√£o dos resultados da busca
    if st.session_state.dados_extracao is not None:
        dados = st.session_state.dados_extracao
        st.success("‚úÖ Dados extra√≠dos com sucesso!")
        st.subheader("üîó Informa√ß√µes do Benefici√°rio:")
        st.markdown(f"**Nome:** {dados['nome']}")
        st.markdown(f"**NB:** {', '.join(dados['lista_nbs']) if dados['lista_nbs'] else 'N√£o encontrado'}")

        col1, col2 = st.columns(2)
        with col1:
            if st.button("Exibir apenas pagos", key="pagos_btn"):
                st.session_state.dados_extracao['mostrar_pagos'] = True
                st.rerun()
        with col2:
            if st.button("Exibir todos", key="todos_btn"):
                st.session_state.dados_extracao['mostrar_pagos'] = False
                st.rerun()

        if st.session_state.dados_extracao.get('mostrar_pagos', False):
            df_filtrado = st.session_state.dados_extracao['df'][st.session_state.dados_extracao['df']["Status"] == "Pago"]
            st.subheader(f"üìë Rubricas com Status 'Pago' (Total: {len(df_filtrado)})")
        else:
            df_filtrado = st.session_state.dados_extracao['df']
            st.subheader("üìë Dados das Rubricas Encontradas:")

        if len(df_filtrado) == 0:
            st.info("Nenhuma rubrica encontrada para o filtro selecionado.")
        else:
            st.dataframe(df_filtrado)
            st.write(f"Quantidade de ocorr√™ncias exibidas: **{len(df_filtrado)}**")

            # Exportar o CSV
            csv = df_filtrado.to_csv(index=False, sep=";", encoding='utf-8-sig')
            st.download_button(
                label="‚¨áÔ∏è Baixar CSV",
                data=csv,
                file_name='rubricas_por_competencia.csv',
                mime='text/csv',
            )
